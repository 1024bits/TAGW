/*
 * This file is generated by jOOQ.
 */
package com.rainday.gen.tables;


import com.rainday.gen.DefaultSchema;
import com.rainday.gen.Indexes;
import com.rainday.gen.Keys;
import com.rainday.gen.tables.records.ApplicationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Application extends TableImpl<ApplicationRecord> {

    private static final long serialVersionUID = -1938227599;

    /**
     * The reference instance of <code>application</code>
     */
    public static final Application APPLICATION = new Application();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationRecord> getRecordType() {
        return ApplicationRecord.class;
    }

    /**
     * The column <code>application.id</code>. 自增主键
     */
    public final TableField<ApplicationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "自增主键");

    /**
     * The column <code>application.app_key</code>. appkey
     */
    public final TableField<ApplicationRecord, String> APP_KEY = createField("app_key", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "appkey");

    /**
     * The column <code>application.app_name</code>. app名称
     */
    public final TableField<ApplicationRecord, String> APP_NAME = createField("app_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "app名称");

    /**
     * The column <code>application.app_port</code>. app端口
     */
    public final TableField<ApplicationRecord, Integer> APP_PORT = createField("app_port", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "app端口");

    /**
     * The column <code>application.description</code>. app描述
     */
    public final TableField<ApplicationRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "app描述");

    /**
     * The column <code>application.app_status</code>. app状态
     */
    public final TableField<ApplicationRecord, String> APP_STATUS = createField("app_status", org.jooq.impl.SQLDataType.VARCHAR(20), this, "app状态");

    /**
     * The column <code>application.deploy_id</code>. deployId
     */
    public final TableField<ApplicationRecord, String> DEPLOY_ID = createField("deploy_id", org.jooq.impl.SQLDataType.VARCHAR(36), this, "deployId");

    /**
     * Create a <code>application</code> table reference
     */
    public Application() {
        this(DSL.name("application"), null);
    }

    /**
     * Create an aliased <code>application</code> table reference
     */
    public Application(String alias) {
        this(DSL.name(alias), APPLICATION);
    }

    /**
     * Create an aliased <code>application</code> table reference
     */
    public Application(Name alias) {
        this(alias, APPLICATION);
    }

    private Application(Name alias, Table<ApplicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Application(Name alias, Table<ApplicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Application(Table<O> child, ForeignKey<O, ApplicationRecord> key) {
        super(child, key, APPLICATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPLICATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ApplicationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APPLICATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApplicationRecord> getPrimaryKey() {
        return Keys.KEY_APPLICATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApplicationRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicationRecord>>asList(Keys.KEY_APPLICATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Application as(String alias) {
        return new Application(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Application as(Name alias) {
        return new Application(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Application rename(String name) {
        return new Application(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Application rename(Name name) {
        return new Application(name, null);
    }
}
