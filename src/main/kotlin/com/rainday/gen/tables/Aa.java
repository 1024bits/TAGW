/*
 * This file is generated by jOOQ.
 */
package com.rainday.gen.tables;


import com.rainday.gen.Public;
import com.rainday.gen.tables.records.AaRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Aa extends TableImpl<AaRecord> {

    private static final long serialVersionUID = 572456798;

    /**
     * The reference instance of <code>PUBLIC.AA</code>
     */
    public static final Aa AA = new Aa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AaRecord> getRecordType() {
        return AaRecord.class;
    }

    /**
     * The column <code>PUBLIC.AA.aa</code>.
     */
    public final TableField<AaRecord, String> AA_ = createField("aa", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>PUBLIC.AA</code> table reference
     */
    public Aa() {
        this(DSL.name("AA"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.AA</code> table reference
     */
    public Aa(String alias) {
        this(DSL.name(alias), AA);
    }

    /**
     * Create an aliased <code>PUBLIC.AA</code> table reference
     */
    public Aa(Name alias) {
        this(alias, AA);
    }

    private Aa(Name alias, Table<AaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Aa(Name alias, Table<AaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Aa(Table<O> child, ForeignKey<O, AaRecord> key) {
        super(child, key, AA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Aa as(String alias) {
        return new Aa(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Aa as(Name alias) {
        return new Aa(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Aa rename(String name) {
        return new Aa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Aa rename(Name name) {
        return new Aa(name, null);
    }
}
